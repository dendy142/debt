const dataStore = require('../dataStore');
const userManagement = require('../userManagement');
const { formatDebts, formatHistory } = require('../utils/formatting');
const { isValidUsername } = require('../utils/validation');
const { mainKeyboard, MAIN_MENU_BUTTONS, SUPPORTED_CURRENCIES, DEFAULT_SETTINGS, DEBTS_PAGE_SIZE, HISTORY_PAGE_SIZE } = require('../constants');
const path = require('path'); // Needed for export filename
const fs = require('fs'); // Use synchronous existsSync for export check

// In-memory state store (passed from bot.js)
let userStates = {};

function initialize(states) {
    userStates = states;
}

// --- Command Handlers ---

async function handleStart(bot, msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id.toString();
    const username = msg.from.username ? `@${msg.from.username}` : null;

    // Update user info and attempt to link pending debts on start
    await userManagement.updateUserLinkInfo(bot, userId, username);

    const welcomeMessage = `
–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞–º–∏ v3.0.

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞–º–∏.
    `;
    bot.sendMessage(chatId, welcomeMessage, {
        parse_mode: 'HTML',
        reply_markup: mainKeyboard
    });
    delete userStates[chatId]; // Clear any previous state
}

function handleHelp(bot, msg) {
    const chatId = msg.chat.id;
    const helpMessage = `
<b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É v3.0:</b>

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:
- <b>${MAIN_MENU_BUTTONS.ADD}</b>: –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–ª–≥ (—Ä—É—á–Ω–æ–π –∏–ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å @username). –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.
- <b>${MAIN_MENU_BUTTONS.VIEW}</b>: –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤ (–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É/–≤–∞–ª—é—Ç–µ, —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π).
- <b>${MAIN_MENU_BUTTONS.REPAY}</b>: –ü–æ–≥–∞—Å–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–ª–≥ (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ).
- <b>${MAIN_MENU_BUTTONS.DELETE}</b>: –£–¥–∞–ª–∏—Ç—å —Ä—É—á–Ω–æ–π –¥–æ–ª–≥ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –¥–æ–ª–≥–∞.
- <b>${MAIN_MENU_BUTTONS.EDIT}</b>: –ò–∑–º–µ–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ–ª–≥–∞ (—Å—É–º–º—É, –≤–∞–ª—é—Ç—É, –¥–∞—Ç—É). –¢—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤.
- <b>${MAIN_MENU_BUTTONS.HISTORY}</b>: –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏).
- <b>${MAIN_MENU_BUTTONS.SETTINGS}</b>: –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞ (–≤–∞–ª—é—Ç–∞, –æ—Å—Ç–∞—Ç–æ–∫, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è).
- <b>${MAIN_MENU_BUTTONS.HELP}</b>: –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.

<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/linkme @—Å—Ç–∞—Ä—ã–π_—é–∑–µ—Ä–Ω–µ–π–º - –ï—Å–ª–∏ –≤–∞–º –¥–æ–±–∞–≤–∏–ª–∏ –¥–æ–ª–≥ –Ω–∞ —Å—Ç–∞—Ä—ã–π —é–∑–µ—Ä–Ω–µ–π–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ç–µ–∫—É—â–µ–º—É.
/start - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

<b>–°–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–ª–≥–∏:</b>
- –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞ —Å @username, –æ–Ω —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è".
- –î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü—Ä–∏–Ω—è—Ç—å"/"–û—Ç–∫–ª–æ–Ω–∏—Ç—å".
- –ü–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –¥–æ–ª–≥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω.
- –ü–æ–≥–∞—à–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è.
- –£–¥–∞–ª–µ–Ω–∏–µ –∏ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
    `;
    bot.sendMessage(chatId, helpMessage, {
        parse_mode: 'HTML',
        reply_markup: mainKeyboard
    });
    delete userStates[chatId];
}

async function handleLinkMe(bot, msg, match) {
    const chatId = msg.chat.id;
    const userId = msg.from.id.toString();
    const currentUsername = msg.from.username ? `@${msg.from.username}` : null;
    const oldUsername = match[1]?.trim(); // Use optional chaining

    if (!currentUsername) {
        bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π @username. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.");
        return;
    }
    if (!isValidUsername(oldUsername)) {
        bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç @username –¥–ª—è /linkme. –ü—Ä–∏–º–µ—Ä: /linkme @my_old_name");
        return;
    }
    if (oldUsername.toLowerCase() === currentUsername.toLowerCase()) {
        bot.sendMessage(chatId, "–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π @username.");
        return;
    }

    bot.sendMessage(chatId, `–ò—â–µ–º –¥–æ–ª–≥–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç ${oldUsername}, –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–≤—è–∑–∞—Ç—å –∏—Ö –∫ ${currentUsername}...`);

    const linkedCount = await userManagement.linkDebtsByOldUsername(bot, userId, currentUsername, oldUsername);

    if (linkedCount > 0) {
        bot.sendMessage(chatId, `–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–æ ${linkedCount} –¥–æ–ª–≥(–æ–≤) —Å ${oldUsername} –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É ${currentUsername}.`);
    } else {
        bot.sendMessage(chatId, `–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–æ–ª–≥–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å ${oldUsername}, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ —É–∂–µ –±—ã–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∏–ª–∏ –∏—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
    }
     delete userStates[chatId];
}


// --- Main Menu Button Handlers ---

async function handleAddDebtButton(bot, msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id.toString();
    delete userStates[chatId]; // Clear previous state first

    const userData = await dataStore.readUserData(userId);
    const knownUsers = userData.knownUsers || {};
    const hasKnownUsers = Object.keys(knownUsers).length > 0;

    userStates[chatId] = { command: 'add', step: 'ask_type', data: {} };

    const inline_keyboard = [
        [{ text: 'üßæ –ú–Ω–µ –¥–æ–ª–∂–Ω—ã', callback_data: 'add_oweMe' }],
        [{ text: 'üí∏ –Ø –¥–æ–ª–∂–µ–Ω', callback_data: 'add_iOwe' }],
        // Add "Select Known User" button later in the flow (after type selection)
        [{ text: '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_operation' }]
    ];

    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–ª–≥–∞:', {
        reply_markup: { inline_keyboard }
    });
}

async function handleViewDebtsButton(bot, msg, page = 1) {
    const chatId = msg.chat.id;
    const userId = msg.from.id.toString();
    delete userStates[chatId];

    const userData = await dataStore.readUserData(userId);
    // Pass true for aggregation, page number
    const { message, totalPages } = formatDebts(userData, true, page, DEBTS_PAGE_SIZE);

    const inline_keyboard = [];
    if (totalPages > 1) {
        const row = [];
        if (page > 1) {
            row.push({ text: '‚¨ÖÔ∏è –ü—Ä–µ–¥.', callback_data: `view_debts_page_${page - 1}` });
        }
        row.push({ text: `üìÑ ${page}/${totalPages}`, callback_data: 'noop' }); // No operation button
        if (page < totalPages) {
            row.push({ text: '–°–ª–µ–¥. ‚û°Ô∏è', callback_data: `view_debts_page_${page + 1}` });
        }
        inline_keyboard.push(row);
    }

    const options = {
        parse_mode: 'HTML',
        reply_markup: inline_keyboard.length > 0 ? { inline_keyboard } : undefined
    };

    // Check if called from a callback query (message edit) or command (new message)
    if (msg.message_id && msg.chat) { // Likely from callback
         try {
             await bot.editMessageText(message, {
                 chat_id: chatId,
                 message_id: msg.message_id,
                 ...options
             });
         } catch (e) { // Handle potential errors like message not modified
             console.warn("Failed to edit message for /debts, sending new one.", e.message);
             await bot.sendMessage(chatId, message, options);
         }
    } else { // Likely from command
        await bot.sendMessage(chatId, message, options);
    }
}


async function handleRepayDebtButton(bot, msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id.toString();
    delete userStates[chatId];

    const userData = await dataStore.readUserData(userId);
    const { iOwe = [], oweMe = [] } = userData.debts;

    // Check only for debts that can be repaid (active or manual)
    const repayableIOwe = iOwe.filter(d => d.status === 'active' || d.status === 'manual');
    const repayableOweMe = oweMe.filter(d => d.status === 'active' || d.status === 'manual');


    if (repayableIOwe.length === 0 && repayableOweMe.length === 0) {
        bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è.');
        return;
    }

    userStates[chatId] = { command: 'repay', step: 'ask_type', data: {} };

    const inline_keyboard = [];
    if (repayableOweMe.length > 0) {
        inline_keyboard.push([{ text: 'üßæ –ü–æ–≥–∞—Å–∏—Ç—å –¥–æ–ª–≥ –º–Ω–µ', callback_data: 'repay_oweMe' }]);
    }
     if (repayableIOwe.length > 0) {
        inline_keyboard.push([{ text: 'üí∏ –ü–æ–≥–∞—Å–∏—Ç—å –º–æ–π –¥–æ–ª–≥', callback_data: 'repay_iOwe' }]);
    }
    inline_keyboard.push([{ text: '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_operation' }]);


    bot.sendMessage(chatId, '–ö–∞–∫–æ–π —Ç–∏–ø –¥–æ–ª–≥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–∞—Å–∏—Ç—å?', {
        reply_markup: { inline_keyboard }
    });
}

async function handleDeleteDebtButton(bot, msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id.toString();
    delete userStates[chatId];

    const userData = await dataStore.readUserData(userId);
     const { iOwe = [], oweMe = [] } = userData.debts;

    // Allow deleting any status for now, logic will handle specifics later
    if (iOwe.length === 0 && oweMe.length === 0) {
        bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
        return;
    }

    userStates[chatId] = { command: 'delete', step: 'ask_type', data: {} };

    const inline_keyboard = [];
     if (oweMe.length > 0) {
        inline_keyboard.push([{ text: 'üßæ –£–¥–∞–ª–∏—Ç—å "–ú–Ω–µ –¥–æ–ª–∂–Ω—ã"', callback_data: 'delete_oweMe' }]);
    }
    if (iOwe.length > 0) {
        inline_keyboard.push([{ text: 'üí∏ –£–¥–∞–ª–∏—Ç—å "–Ø –¥–æ–ª–∂–µ–Ω"', callback_data: 'delete_iOwe' }]);
    }
    inline_keyboard.push([{ text: '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_operation' }]);

    bot.sendMessage(chatId, '–ö–∞–∫–æ–π —Ç–∏–ø –¥–æ–ª–≥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?', {
         reply_markup: { inline_keyboard }
     });
}

async function handleEditDebtButton(bot, msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id.toString();
    delete userStates[chatId];

    const userData = await dataStore.readUserData(userId);
    const { iOwe = [], oweMe = [] } = userData.debts;

    // Allow editing active or manual debts for now
    const editableIOwe = iOwe.filter(d => d.status === 'active' || d.status === 'manual');
    const editableOweMe = oweMe.filter(d => d.status === 'active' || d.status === 'manual');

    if (editableIOwe.length === 0 && editableOweMe.length === 0) {
        bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
        return;
    }

    userStates[chatId] = { command: 'edit', step: 'ask_type', data: {} };

    const inline_keyboard = [];
    if (editableOweMe.length > 0) {
        inline_keyboard.push([{ text: 'üßæ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "–ú–Ω–µ –¥–æ–ª–∂–Ω—ã"', callback_data: 'edit_oweMe' }]);
    }
     if (editableIOwe.length > 0) {
        inline_keyboard.push([{ text: 'üí∏ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "–Ø –¥–æ–ª–∂–µ–Ω"', callback_data: 'edit_iOwe' }]);
    }
    inline_keyboard.push([{ text: '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_operation' }]);


    bot.sendMessage(chatId, '–ö–∞–∫–æ–π —Ç–∏–ø –¥–æ–ª–≥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', {
        reply_markup: { inline_keyboard }
    });
}


async function handleHistoryButton(bot, msg, page = 1) {
    const chatId = msg.chat.id;
    const userId = msg.from.id.toString();
    // Don't delete state here, keep filters
    // delete userStates[chatId];

    const userData = await dataStore.readUserData(userId);
    const historyFilters = userStates[`${chatId}_history_filters`] || {}; // Get filters if they exist
    const { message, totalPages } = formatHistory(userData.history, userData.knownUsers, historyFilters, page, HISTORY_PAGE_SIZE);

    // --- Filter Buttons ---
    const filter_keyboard = [
        // Row 1: Filter options
        [
            { text: 'üë§ –ü–æ –∫–æ–Ω—Ç–∞–∫—Ç—É', callback_data: 'history_filter_contact' },
            { text: 'üìÖ –ü–æ –¥–∞—Ç–µ', callback_data: 'history_filter_date' },
            // { text: 'üè∑Ô∏è –ü–æ –¥–µ–π—Å—Ç–≤–∏—é', callback_data: 'history_filter_action' } // Optional
        ],
        // Row 2: Reset
        [
             { text: 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã', callback_data: 'history_filter_reset' }
        ],
         // Row 3: Close
        [
             { text: '‚¨ÖÔ∏è –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'history_close' }
        ]
    ];

    // --- Pagination Buttons ---
     if (totalPages > 1) {
        const row = [];
        if (page > 1) {
            row.push({ text: '‚¨ÖÔ∏è –ü—Ä–µ–¥.', callback_data: `history_page_${page - 1}` });
        }
        row.push({ text: `üìÑ ${page}/${totalPages}`, callback_data: 'noop' }); // No operation button
        if (page < totalPages) {
            row.push({ text: '–°–ª–µ–¥. ‚û°Ô∏è', callback_data: `history_page_${page + 1}` });
        }
        filter_keyboard.unshift(row); // Add pagination buttons at the top
    }


    // Indicate active filters
    let filterStatus = '';
    if (Object.keys(historyFilters).length > 0) {
        filterStatus = '\n\n<i>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</i>';
        if (historyFilters.contactUserId) {
             const contactName = userData.knownUsers[historyFilters.contactUserId] || `User_${historyFilters.contactUserId}`;
             filterStatus += ` –ö–æ–Ω—Ç–∞–∫—Ç (${contactName})`;
        }
        if (historyFilters.startDate || historyFilters.endDate) {
            filterStatus += ` –î–∞—Ç–∞ (${historyFilters.startDate?.toLocaleDateString('ru-RU') ?? '...'} - ${historyFilters.endDate?.toLocaleDateString('ru-RU') ?? '...'})`;
        }
         // Add other filters...
         filterStatus += '.';
    }

     const options = {
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: filter_keyboard }
    };

     // Check if called from a callback query (message edit) or command (new message)
    if (msg.message_id && msg.chat) { // Likely from callback
         try {
             await bot.editMessageText(message + filterStatus, {
                 chat_id: chatId,
                 message_id: msg.message_id,
                 ...options
             });
         } catch (e) { // Handle potential errors like message not modified
             console.warn("Failed to edit message for /history, sending new one.", e.message);
             await bot.sendMessage(chatId, message + filterStatus, options);
         }
    } else { // Likely from command
        await bot.sendMessage(chatId, message + filterStatus, options);
    }
}

async function handleSettingsButton(bot, msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id.toString();
    delete userStates[chatId]; // Clear any previous command state

    const userData = await dataStore.readUserData(userId);
    const settings = userData.settings; // Already merged with defaults

    const settingsMessage = `
<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>

- –í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: <b>${settings.defaultCurrency}</b>
- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —á–∏—Å—Ç—ã–π –æ—Å—Ç–∞—Ç–æ–∫: <b>${settings.showNetBalance ? '–î–∞ ‚úÖ' : '–ù–µ—Ç ‚ùå'}</b>
- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å—Ä–æ–∫–∞—Ö: <b>${settings.remindersEnabled ? `–í–∫–ª ‚úÖ (–∑–∞ ${settings.reminderDaysBefore} –¥.)` : '–í—ã–∫–ª ‚ùå'}</b>
${/* - –°—Ç–∏–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: <b>${settings.displayStyle}</b> */''}

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É.
    `;

    const inline_keyboard = [
        [
            { text: `üí≤ –í–∞–ª—é—Ç–∞ (${settings.defaultCurrency})`, callback_data: 'settings_change_currency' },
            { text: `‚öñÔ∏è –û—Å—Ç–∞—Ç–æ–∫ (${settings.showNetBalance ? '–í–∫–ª' : '–í—ã–∫–ª'})`, callback_data: 'settings_toggle_netbalance' }
        ],
        [
             { text: `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`, callback_data: 'settings_manage_notifications' }, // Changed
             { text: `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è`, callback_data: 'settings_manage_reminders' } // Changed
        ],
        // [ { text: `üé® –°—Ç–∏–ª—å (${settings.displayStyle})`, callback_data: 'settings_change_style' } ], // Future
        [ { text: `üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö`, callback_data: 'settings_export_data' } ],
        [ { text: '‚¨ÖÔ∏è –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'settings_close' } ]
    ];

    bot.sendMessage(chatId, settingsMessage, {
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard }
    });
}

function handleHelpButton(bot, msg) {
    // Just call the /help handler
    handleHelp(bot, msg);
}

module.exports = {
    initialize,
    handleStart,
    handleHelp,
    handleLinkMe,
    handleAddDebtButton,
    handleViewDebtsButton,
    handleRepayDebtButton,
    handleDeleteDebtButton,
    handleEditDebtButton,
    handleHistoryButton,
    handleSettingsButton,
    handleHelpButton
};
